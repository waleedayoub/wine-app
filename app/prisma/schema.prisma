generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  // provider = "sqlite"
  // url      = "file:./dev.db"
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int                 @id @default(autoincrement())
  email        String              @unique
  password     String?
  name         String?
  posts        Post[]
  productLists ProductList[]
  emailGroups  EmailGroup[]
  Notification EmailNotification[]
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  published Boolean  @default(false)
  viewCount Int      @default(0)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model ProductList {
  id                 Int                  @id @default(autoincrement())
  createdAt          DateTime             @default(now())
  authorId           Int?
  author             User?                @relation(fields: [authorId], references: [id])
  ProductListMapping ProductListMapping[]
  Notification       EmailNotification[]
}

model Product {
  id                 Int                  @id @default(autoincrement())
  name               String
  url String
  description String
  countryOfManufactore String
  AlcoholPercentage String
  active             Boolean
  categoryId         Int?
  ProductListMapping ProductListMapping[]
}

model ProductListMapping {
  id            Int          @id @default(autoincrement())
  productListId Int
  productId     Int
  product       Product?     @relation(fields: [productId], references: [id])
  productList   ProductList? @relation(fields: [productListId], references: [id])
}

model EmailGroup {
  id           Int                 @id @default(autoincrement())
  emails       String              @db.VarChar(500)
  userId       Int?
  user         User?               @relation(fields: [userId], references: [id])
  Notification EmailNotification[]
}

model EmailNotification {
  id            Int          @id @default(autoincrement())
  emailGroupId  Int?
  productListId Int?
  userId        Int?
  scheduledAt   DateTime     @default(now())
  status        Boolean
  user          User?        @relation(fields: [userId], references: [id])
  productList   ProductList? @relation(fields: [productListId], references: [id])
  emailGroup    EmailGroup?  @relation(fields: [emailGroupId], references: [id])
}
